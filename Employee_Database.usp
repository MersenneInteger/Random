/*******************************************************************************************
  SIMPL+ Module Information
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/
/*******************************************************************************************
  Compiler Directives
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "Employee Database"
// #HINT ""
#DEFINE_CONSTANT  true  1
#DEFINE_CONSTANT  false 0

#DEFINE_CONSTANT PATH_MEMB "\\NVRAM\\members.bin"
#DEFINE_CONSTANT PATH_NUM "\\NVRAM\\number.txt"
#DEFINE_CONSTANT MAX_ENTRIES  25

#CATEGORY "46" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
*******************************************************************************************/
DIGITAL_INPUT Start, Add_Employee, Delete_Employee, _skip_, Dias_Enter[10], _skip_, _skip_,
              MemberSelected[25]; 
// ANALOG_INPUT 
STRING_INPUT  _skip_, _skip_, Add_PIN[255], Add_Name[255], _skip_, Member_PIN[MAX_ENTRIES][255];
// BUFFER_INPUT 

DIGITAL_OUTPUT _skip_, _skip_, _skip_, _skip_,Dias_Status[10], _skip_, _skip_, _skip_, _skip_, _skip_,
               _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
              _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
              _skip_, _skip_, _skip_, _skip_;
ANALOG_OUTPUT Num_In_Database;
STRING_OUTPUT   _skip_, _skip_, _skip_, _skip_, _skip_,Member_Name[MAX_ENTRIES], _skip_, DiasAttendees[10];

/*******************************************************************************************
  Structure Definitions
*******************************************************************************************/
structure council_member
{
  string name[50];
  string pin[50];
};
council_member member;
council_member member_list[MAX_ENTRIES];

/*******************************************************************************************
  Global Variables
*******************************************************************************************/
INTEGER num_of_members, last, j;
// LONG_INTEGER
//SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

/*******************************************************************************************
  Functions
*******************************************************************************************/
function read_member()
{
  signed_integer i, file, bytes_read; 
  startfileoperations();
  file = fileopen(PATH_MEMB, _O_RDONLY | _O_BINARY | _O_CREAT);
  i = 0;
  while(FileEOF(file) = 0){
    readstructure(file, member_list[i], bytes_read);
    Member_Name[i+1] = member_list[i].name;
    trace("member: %s : %s", member_list[i].name, member_list[i].pin);
    i = i + 1;
    processlogic();
  }
  num_of_members = i;
  Num_In_Database = num_of_members;
  fileclose(file);
  endfileoperations();
}

function write_member()
{
  signed_integer i, file, bytes_written;
  startfileoperations();
  file = fileopen(PATH_MEMB, _O_BINARY | _O_RDWR | _O_TRUNC);
  if(file < 0)
    read_member();
  i = 0;
  while(member_list[i].name != " "){
    writestructure(file, member_list[i], bytes_written);
    Member_Name[i+1] = member_list[i].name;
    trace("member: %s : %s", member_list[i].name, member_list[i].pin);
    i = i + 1; 
    processlogic();
  }
  num_of_members = i;
  trace("num_of_members = %i", num_of_members);
  fileclose(file);
  endfileoperations();
}

integer_function search_employee(string str)
{
  integer i, found;
  found = -1;
  for(i = 0 to num_of_members) {
    if(!comparestrings(member_list[i].pin, str)){
      found = i+1;
      break;
    }
  }
  return(found);
}

function shift_struct(integer index)
{
  integer i;
  for(i = index to num_of_members) {
    member_list[i].name = member_list[i+1].name;
    member_list[i].pin = member_list[i+1].pin;
    Member_Name[i+1] = member_list[i].name;
  }
  member_list[num_of_members].name = " ";
  member_list[num_of_members].pin = " ";
  Member_Name[i+1] = member_list[i].name;
}

/*******************************************************************************************
  Event Handlers
*******************************************************************************************/
push Start
{
  read_member();
}

push Add_Employee
{
  if(num_of_members + 1 <= MAX_ENTRIES){
    member_list[num_of_members].name = Add_Name;
    member_list[num_of_members].pin = Add_PIN;
    num_of_members = num_of_members + 1;
    Member_Name[num_of_members] = Add_Name;
    write_member();
  }else
    print("Error: Max Entries Exceeded");
}

push Delete_Employee
{
  if(num_of_members > 0){
    member_list[last-1].name = " ";
    member_list[last-1].pin = " ";
    num_of_members = num_of_members - 1;
    shift_struct(last-1);
    write_member();
  }
}

push Dias_Enter
{
  integer loc, press;
  press = getlastmodifiedarrayindex();
  trace("press = %i", press);
  loc = search_employee(Member_PIN[press]);
  trace("loc = %i\nMember_PIN[press] = %s", loc, Member_PIN[press]);
  if(loc != -1) {
    trace("valid");
    DiasAttendees[press] = member_list[loc-1].name;
    pulse(20, Dias_Status[press]);
  }else
    Dias_Status[press] = off;
}

push MemberSelected
{
  last = getlastmodifiedarrayindex();
}

/*******************************************************************************************
  Main()
*******************************************************************************************/
Function Main()
{
  waitforinitializationcomplete();
  for(j = 0 to MAX_ENTRIES) {
    member_list[j].name = " ";
    member_list[j].pin = " ";
    processlogic();
  }
}
