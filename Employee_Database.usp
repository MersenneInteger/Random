/*******************************************************************************************
  SIMPL+ Module Information
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/
/*******************************************************************************************
  Compiler Directives
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "Employee Database"
// #HINT ""
#DEFINE_CONSTANT  true    1
#DEFINE_CONSTANT  false   0

#DEFINE_CONSTANT PATH_MEMB  "\\NVRAM\\members.bin"
#DEFINE_CONSTANT PATH_NUM   "\\NVRAM\\number.txt"

#DEFINE_CONSTANT MAX_ENTRIES  100
#DEFINE_CONSTANT DAIS         10

#CATEGORY "46" "Utilities"
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
*******************************************************************************************/
DIGITAL_INPUT Start, Add_Employee, Delete_Employee, Logout, _skip_, Dais_Enter[DAIS], _skip_, _skip_,
              MemberSelected[MAX_ENTRIES]; 
// ANALOG_INPUT 
STRING_INPUT  _skip_, _skip_, Add_PIN[255], Add_Name[255], Add_User[255], Member_PIN[DAIS][255], _skip_, Member_Name[DAIS][255];
// BUFFER_INPUT 

DIGITAL_OUTPUT _skip_, _skip_, _skip_, _skip_,_skip_, Dais_Status[DAIS], _skip_, _skip_, _skip_, _skip_,
              _skip_, _skip_, _skip_,_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
              _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
              _skip_, _skip_, _skip_, _skip_,_skip_, _skip_, _skip_, _skip_,_skip_, _skip_, _skip_,
              _skip_, _skip_,  _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
              _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,_skip_,_skip_,
              _skip_, _skip_, _skip_, _skip_,_skip_, _skip_, _skip_, _skip_,_skip_, _skip_, _skip_, 
              _skip_, _skip_, _skip_, _skip_,_skip_, _skip_, _skip_, _skip_,_skip_, _skip_, _skip_, 
              _skip_, _skip_,  _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,_skip_, _skip_, _skip_,  
              _skip_, _skip_, _skip_,_skip_, _skip_, _skip_, _skip_, _skip_, _skip_;
ANALOG_OUTPUT Num_In_Database;
STRING_OUTPUT  _skip_, _skip_, _skip_, Database_User[MAX_ENTRIES], _skip_, Dais_Attendees[DAIS];

/*******************************************************************************************
  Structure Definitions
*******************************************************************************************/
structure council_member
{
  string name[50];
  string user[50];
  string pin[50];
};
council_member member;
council_member member_list[MAX_ENTRIES];

/*******************************************************************************************
  Global Variables
*******************************************************************************************/
INTEGER num_of_members, last;
// LONG_INTEGER
//SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

/*******************************************************************************************
  Functions
*******************************************************************************************/
function startup()
{
  integer i;
  for(i = 0 to MAX_ENTRIES-1) {
    member_list[i].name = " ";
    member_list[i].pin = " ";
    member_list[i].user = " ";
    processlogic();
  }
}

function read_member()
{
  signed_integer i, file, bytes_read; 
  i = 0;
  
  startfileoperations();
  file = fileopen(PATH_MEMB, _O_RDONLY | _O_BINARY | _O_CREAT);
  while(FileEOF(file) = 0){
    readstructure(file, member_list[i], bytes_read);
    Database_User[i+1] = member_list[i].name;
    i = i + 1;
    processlogic();
  }
  num_of_members = i;
  Num_In_Database = num_of_members;
  fileclose(file);
  endfileoperations();
}

function write_member()
{
  signed_integer i, file, bytes_written;
  i = 0;
  
  startfileoperations();
  file = fileopen(PATH_MEMB, _O_BINARY | _O_RDWR | _O_TRUNC);
  if(file < 0)
    read_member();
  while(member_list[i].name != " "){
    writestructure(file, member_list[i], bytes_written);
    Database_User[i+1] = member_list[i].name;
    i = i + 1; 
    processlogic();
  }
  num_of_members = i;
  fileclose(file);
  endfileoperations();
}

integer_function search_employee(string pin, string user)
{
  integer i, found, flag;
  flag = false;
  found = -1;
  
  for(i = 0 to num_of_members-1) {
    if(flag) break;
    if((comparestrings(member_list[i].pin, pin) = 0) && (comparestrings(member_list[i].user, user) = 0)){
        found = i+1;
        flag = true;
    }
    //processlogic();
    /*
      process logic in this loop caused some logic evals to be skipped
      works consistenly after it was commented out, something to look into
    */
  }
  return(found);
}

function shift_struct(integer index)
{
  integer i;
  for(i = index to num_of_members-1) {
    member_list[i].name = member_list[i+1].name;
    member_list[i].pin = member_list[i+1].pin;
    member_list[i].user = member_list[i+1].user;
    Database_User[i+1] = member_list[i].name;
    processlogic();
  }
  member_list[num_of_members].name = " ";
  member_list[num_of_members].pin = " ";
  member_list[num_of_members].user = " ";
  Database_User[i+1] = member_list[i].name;
}

/*******************************************************************************************
  Event Handlers
*******************************************************************************************/
push Start
{
  read_member();
}

push Add_Employee
{
  if(num_of_members + 1 <= MAX_ENTRIES){
    member_list[num_of_members].name = Add_Name;
    member_list[num_of_members].pin = Add_PIN;
    member_list[num_of_members].user = Add_User;
    num_of_members = num_of_members + 1;
    Database_User[num_of_members] = Add_Name;
    write_member();
  }else
    print("Error: Max Entries Exceeded");
}

push Delete_Employee
{
  if(num_of_members > 0){
    member_list[last-1].name = " ";
    member_list[last-1].pin = " ";
    member_list[last-1].user = " ";
    num_of_members = num_of_members - 1;
    shift_struct(last-1);
    write_member();
  }
}

push Dais_Enter
{
  integer loc, press;
  press = getlastmodifiedarrayindex();
  loc = search_employee(Member_PIN[press], Member_Name[press]);
  trace("loc = %i", loc);
  if(loc != -1) {
    Dais_Attendees[press] = member_list[loc-1].name;
    pulse(20, Dais_Status[press]);
  }else
    Dais_Status[press] = off;
}

push MemberSelected
{
  last = getlastmodifiedarrayindex();
}

push Logout
{
  setarray(Dais_Attendees, " ");
  last = -1;
}
/*******************************************************************************************
  Main()
*******************************************************************************************/
Function Main()
{
  waitforinitializationcomplete();
  startup();
}
