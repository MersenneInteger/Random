//
#DEFINE_CONSTANT PORT 9993
#DEFINE_CONSTANT true 1
#DEFINE_CONSTANT false 0
#DEFINE_CONSTANT ENABLE_REMOTE "remote: enable: true\x0d\x0a"
#DEFINE_CONSTANT PLAY_CMD "Play\x0d\x0a"
#DEFINE_CONSTANT REC_CMD "Record\x0d\x0a"
#DEFINE_CONSTANT STOP_CMD "Stop\x0d\x0a"
#DEFINE_CONSTANT DISK_FULL_ERR "104 disk full"
#DEFINE_CONSTANT NO_DISK_ERR "105 no disk"
#DEFINE_CONSTANT GENERAL_DISK_ERR "106 disk error"
#DEFINE_CONSTANT NO_INPUT_ERR "110 no input"
#DEFINE_CONSTANT DEBUG 1
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#PRINT_TO_TRACE

digital_input _skip_;
digital_input Connect;
digital_input _skip_;
digital_input Play;
digital_input Record;
digital_input Stop;

digital_output _skip_;
digital_output Connected;
digital_output _skip_;
digital_output Play_Fb;
digital_output Record_Fb;
digital_output Stop_Fb;
string_output _skip_;
string_output Status;

string_parameter ip[12];
#BEGIN_PARAMETER_PROPERTIES ip
   propValidUnits =  unitString;
   propDefaultUnit = unitString;
   propDefaultValue = "xxx.xxx.xxx.xxx";
   propShortDescription = "IP Address of connecting server";
#END_PARAMETER_PROPERTIES

tcp_client tcpClient[1024];
integer isConnected;
signed_integer hdSocketStatus;
string lastCmdSent[64];

function sendCmd(string cmd)
{
    signed_integer err;
    err = socketSend(tcpClient, cmd);
    if(!err)
        print("Command sent to [%s]", ip);
    else
        print("Error occured sending command to [%s]", ip);
}

push Connect
{
    signed_integer connectStatus;
    try
    {
        if(isConnected = false && len(ip) > 0)
        {
            connectStatus = socketConnectClient(tcpClient, ip, PORT, true);
            if(connectStatus = 0)
                print("[%s] connected", ip);
            else
                print("Error occured connecting [%s]", ip);
        }
    }
	catch
	{
        	generateUserError("%s Exception Thrown %s", getSymbolInstanceName(), getExceptionMessage());
		print("Exception thrown connecting socket$: %s", getExceptionMessage());
	}
}

release Connect
{
    signed_integer connectStatus;
    if(isConnected)
    {
        connectStatus = socketDisconnectClient(tcpClient);
        if(connectStatus = 0)
            print("[%s] disconnected successfully", ip);
        else
            print("Error occured disconnecting [%s]", ip);
    }
}

push Play
{
    sendCmd(PLAY_CMD);
	lastCmdSent = PLAY_CMD;
}

push Record
{
    	sendCmd(REC_CMD);
	lastCmdSent = REC_CMD;
}

push Stop
{
    	sendCmd(STOP_CMD);
	lastCmdSent = STOP_CMD;
}

socketConnect tcpClient
{
    	isConnected = true;
	Connected = on;
    	print("[%s] connected", ip);
}

socketDisconnect tcpClient
{
    	isConnected = false;
	Connected = off;
    	print("[%s] Disconnected", ip);
}

socketStatus tcpClient
{
    	hdSocketStatus = socketGetStatus();
    	#IF_DEFINED DEBUG
		if(hdSocketStatus = 0)
		    print("[%s] Not Connected", ip);
		else if(hdSocketStatus = 1)
		    print("[%s] Waiting for connection", ip);
		else if(hdSocketStatus = 2)
		    print("[%s] Connected", ip);
		else if(hdSocketStatus >= 3 && hdSocketStatus <= 5)
		    print("[%s] Connection Failed", ip);
	#ENDIF
}

threadsafe socketReceive tcpClient
{
    string rxBuffer[1024];
    print("[%s] rxBuffer: %s", ip, tcpClient.SocketRxBuf);

    while(1)
    {
        try
        {
            rxBuffer = gather("\x0a", tcpClient.SocketRxBuf);
            if(find("200 ok", rxBuffer))
            {
                if(lastCmdSent = PLAY_CMD)
                {
                    Record_Fb = off;
                    Stop_Fb = off;
                    Play_Fb = on;
                }
                else if(lastCmdSent = REC_CMD)
                {
                    Play_Fb = off;
                    Stop_Fb = off;
                    Record_Fb = on;
                }
                else if(lastCmdSent = STOP_CMD)
                {
                    Play_Fb = off;
                    Record_Fb = off;
                    Stop_Fb = on;
                }
                lastCmdSent = "";
            }
            else if(find(DISK_FULL_ERR, rxBuffer)) Status = DISK_FULL_ERR;
            else if(find(NO_DISK_ERR, rxBuffer)) Status = NO_DISK_ERR;
            else if(find(GENERAL_DISK_ERR, rxBuffer)) Status = GENERAL_DISK_ERR;
            else if(find(NO_INPUT_ERR, rxBuffer)) Status = NO_INPUT_ERR;
        }
        catch
        {
         	generateUserError("%s Exception Thrown %s", getSymbolInstanceName(), getExceptionMessage());
		trace("Exception thrown parsing Rx$: %s", getExceptionMessage());           
        }
    }
    clearbuffer(tcpClient.SocketRxBuf);
}

function main()
{
    waitForInitializationComplete();
    isConnected = false;
    lastCmdSent = "";
}
